/*
 * Copyright (c) 2016, Oracle and/or its affiliates.
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
 * conditions and the following disclaimer in the documentation and/or other materials provided
 * with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
 * endorse or promote products derived from this software without specific prior written
 * permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This is the grammar of Inline-Assembly that is used to automatically generate the Parser.java and Scanner.java
 * files. You can download the parser generator Coco/R from http://ssw.jku.at/coco/. Then run
 * "java -jar ../Coco.jar InlineAssembly.atg"
 */
import java.io.ByteArrayInputStream;

import com.oracle.truffle.llvm.nodes.base.LLVMExpressionNode;
import com.oracle.truffle.llvm.nodes.impl.func.LLVMInlineAssemblyRootNode;
import com.oracle.truffle.llvm.parser.LLVMBaseType;

COMPILER InlineAssembly

//parser methods and fields here


CHARACTERS
digit = "0123456789".
hexDigit = "0123456789ABCDEFabcdef".
letter = 'a' .. 'z'.
lf = '\n'.

TOKENS
ident = letter {letter | digit | '_'}.
number = ["-"] digit { digit }.
hexNumber = "0x" hexDigit { hexDigit }.

PRAGMAS
IGNORE "\n\t\r"

PRODUCTIONS

InlineAssembly<> =
										(..)
  "\""
  (AddSubOperation<> | IncDecOperation<> | LogicOperation<> | ShiftOperation<> | MoveOperation<> | MulOperation<>)
  {AddSubOperation<> | IncDecOperation<> | LogicOperation<> | ShiftOperation<> | MoveOperation<> | MulOperation<>}
  "\""
  										(.root = factory.finishInline();.)
  .

AddSubOperation<> =						(.String op; String left = null, right = null;.)
  AddSubOp<out op>
  ((Register<out left> "," Register<out right>)
  |
  (Immediate<out left> "," Register<out right>)
  )";"									(.factory.createBinaryOperation(op, left, right);.)
   .

MulOperation<> =						(.String op; String left = null, right = null;.)
  MulOp<out op>
  ((Register<out left> "," Register<out right>)
  |
  (Immediate<out left> "," Register<out right>)
  )";"									(.factory.createBinaryOperation(op, left, right);.)
  .

IncDecOperation<> =						(.String op; String left = null;.)
  IncDecOp<out op>
  Register<out left>					
  ";"									(.factory.createUnaryOperation(op, left);.)
  .

LogicOperation<> =						(.String op = null; String left = null, right = null;.)
  ((UnaryLogicOp<out op> 
  Register<out left>)	  				(.factory.createUnaryOperation(op, left);.)
  | (BinaryLogicOp<out op>
  Register<out left>
  "," Register<out right>				(.factory.createBinaryOperation(op, left, right);.)
  ))";"
  .
  
ShiftOperation<> = 						(.String op = null; String left = null, right = null;.)
  ShiftOp<out op>
  Immediate<out left> "," Register<out right>
  										(.factory.createBinaryOperation(op, left, right);.)
  ";"
  .
  
MoveOperation<> =						(.String op; String left = null, right = null;.)
  MoveOp<out op>
  ((Register<out left> "," Register<out right>)
  |
  (Immediate<out left> "," Register<out right>)
   )";"									(.factory.createBinaryOperation(op, left, right);.)
   .
  
AddSubOp<out String op> 				(.op = la.val;.)
  = "addl"
  | "subl"
  .

IncDecOp<out String op>					(.op = la.val;.)
  = "incl"
  | "decl"
  .

UnaryLogicOp<out String op>				(.op = la.val;.)
  = "notl"
  .
  
BinaryLogicOp<out String op>			(.op = la.val;.)
  = "andl"
  | "orl"
  | "xorl"
  .
  
ShiftOp<out String op>					(.op = la.val;.)
  = "shll"
  | "shrl"
  | "sall"
  | "sarl"
  .

MulOp<out String op>					(.op = la.val;.)
  = "imull"
  .
  
MoveOp<out String op>					(.op = la.val;.)
  = "movl"
  .  

Register<out String reg> =
  ( "%eax"
  | "%ebx"
  | "%ecx"
  | "%edx"
  | "%esp"
  | "%ebp"
  | "%esi"
  | "%edi"
  )										(.reg = t.val; factory.addFrameSlot(reg, this.retType);.)
  .

Immediate<out String n> =				(.n = null;.)
    "$$"
  ( number								(.n = t.val;.)
  | hexNumber							(.n = t.val;.)
  )										
  .

END InlineAssembly.
