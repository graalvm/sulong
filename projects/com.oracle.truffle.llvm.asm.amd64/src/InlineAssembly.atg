/*
 * Copyright (c) 2016, Oracle and/or its affiliates.
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
 * conditions and the following disclaimer in the documentation and/or other materials provided
 * with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
 * endorse or promote products derived from this software without specific prior written
 * permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This is the grammar of Inline-Assembly that is used to automatically generate the Parser.java and Scanner.java
 * files. You can download the parser generator Coco/R from http://ssw.jku.at/coco/. Then run
 * "java -jar ../Coco.jar InlineAssembly.atg"
 */
import java.io.ByteArrayInputStream;

import com.oracle.truffle.llvm.nodes.func.LLVMInlineAssemblyRootNode;
import com.oracle.truffle.llvm.runtime.types.Type;

COMPILER InlineAssembly

//parser methods and fields here

IGNORECASE

CHARACTERS
digit = "0123456789".
binDigit = "01".
octDigit = "01234567".
hexDigit = "0123456789ABCDEFabcdef".
letter = 'a' .. 'z'.
lf = '\n'.

TOKENS
ident = letter {letter | digit | '_'}.
binNumber = "0b" binDigit { binDigit }.
hexNumber = "0x" hexDigit { hexDigit }.
number = ["-"] digit { digit }.

PRAGMAS
IGNORE "\t\r"

PRODUCTIONS

InlineAssembly<> =
  "\""
  [ ( Prefix [ ";" ]
    |							(. factory.setPrefix(null); .)
    )
    AssemblyInstruction
    { ( ";" | "\n" )
      ( Prefix
      |							(. factory.setPrefix(null); .)
      )
      [ AssemblyInstruction ]
    }
  ]
  "\""
  							(. root = factory.finishInline(); .)
  .

////////////////////////////////////////////////////////////////////////////////
Prefix =
  ( "rep"
  | "repz"
  | "repe"
  | "repne"
  | "repnz"
  | "lock"
  )							(. factory.setPrefix(t.val); .)
  .

AssemblyInstruction<> =
  ( ZeroOp<>
  | UnOp8<>
  | UnOp16<>
  | UnOp32<>
  | UnOp64<>
  | UnOp<>
  | BinOp8<>
  | BinOp16<>
  | BinOp32<>
  | BinOp64<>
  | BinOp<>
  | IMulDiv<>
  | Jump<>
  | Int<>
  )
  .

Int<> =							(. AsmImmediateOperand nr; .)
  "int"
  Immediate<out nr>					(. factory.createInt(nr); .)
  .

Jump<> =						(. @SuppressWarnings("unused") String op; @SuppressWarnings("unused") AsmOperand bta; .)
  ( "call"
  | "ja"
  | "jae"
  | "jb"
  | "jbe"
  | "jc"
  | "jcxz"
  | "je"
  | "jecxz"
  | "jg"
  | "jge"
  | "jl"
  | "jle"
  | "jmp"
  | "jnae"
  | "jnb"
  | "jnbe"
  | "jnc"
  | "jne"
  | "jng"
  | "jnge"
  | "jnl"
  | "jnle"
  | "jno"
  | "jnp"
  | "jns"
  | "jnz"
  | "jo"
  | "jp"
  | "jpe"
  | "jpo"
  | "js"
  | "jz"
  | "lcall"
  | "loop"
  | "loope"
  | "loopne"
  | "loopnz"
  | "loopz"
  )							(. op = t.val; .)
  Operand64<out bta>
  .

ZeroOp<> =						(. String op; .)
  ( "clc"
  | "cld"
  | "cli"
  | "cmc"
  | "lahf"
  | "popf"
  | "popfw"
  | "pushf"
  | "pushfw"
  | "sahf"
  | "stc"
  | "std"
  | "sti"
  | "nop"
  | "rdtsc"
  | "cpuid"
  | "xgetbv"
  | "ud2"
  | "mfence"
  | "lfence"
  | "sfence"
  )							(. op = t.val; .)
  							(. factory.createOperation(op); .)
  .

IMulDiv<> =						(. String op; AsmOperand a, b = null, c = null; .)
  ( ( "idivb"
    | "imulb"
    )							(. op = t.val; .)
    Operand8<out a> [ "," Operand8<out b> [ "," Operand8<out c> ] ]
    							(. if(b == null) {
    							  	factory.createUnaryOperation(op, a);
    							  } else if(c == null) {
    							  	factory.createBinaryOperation(op, a, b);
    							  } else {
    							  	factory.createTernaryOperation(op, a, b, c);
    							  }
    							  .)
  | ( "idivw"
    | "imulw"
    )							(. op = t.val; .)
    Operand16<out a> [ "," Operand16<out b> [ "," Operand16<out c> ] ]
    							(. if(b == null) {
    							  	factory.createUnaryOperation(op, a);
    							  } else if(c == null) {
    							  	factory.createBinaryOperation(op, a, b);
    							  } else {
    							  	factory.createTernaryOperation(op, a, b, c);
    							  }
    							  .)
  | ( "idivl"
    | "imull"
    )							(. op = t.val; .)
    Operand32<out a> [ "," Operand32<out b> [ "," Operand32<out c> ] ]
    							(. if(b == null) {
    							  	factory.createUnaryOperation(op, a);
    							  } else if(c == null) {
    							  	factory.createBinaryOperation(op, a, b);
    							  } else {
    							  	factory.createTernaryOperation(op, a, b, c);
    							  }
    							  .)
  | ( "idivq"
    | "imulq"
    )							(. op = t.val; .)
    Operand64<out a> [ "," Operand64<out b> [ "," Operand64<out c> ] ]
    							(. if(b == null) {
    							  	factory.createUnaryOperation(op, a);
    							  } else if(c == null) {
    							  	factory.createBinaryOperation(op, a, b);
    							  } else {
    							  	factory.createTernaryOperation(op, a, b, c);
    							  }
    							  .)
  | ( "idiv"
    | "imul"
    )							(. op = t.val; .)
    Operand<out a> [ "," Operand<out b> [ "," Operand<out c> ] ]
    							(. if(b == null) {
    							  	factory.createUnaryOperation(op, a);
    							  } else if(c == null) {
    							  	factory.createBinaryOperation(op, a, b);
    							  } else {
    							  	factory.createTernaryOperation(op, a, b, c);
    							  }
    							  .)
  )
  .

UnOp8<> =						(. String op; AsmOperand arg; .)
  ( "incb"
  | "decb"
  | "negb"
  | "notb"
  | "divb"
  | "mulb"
  )							(. op = t.val; .)
  Operand8<out arg>
  							(. factory.createUnaryOperation(op, arg); .)
  .

UnOp16<> =						(. String op; AsmOperand arg; .)
  ( "incw"
  | "decw"
  | "negw"
  | "notw"
  | "divw"
  | "mulw"
  | "pushw"
  | "popw"
  )							(. op = t.val; .)
  Operand16<out arg>
  							(. factory.createUnaryOperation(op, arg); .)
  .

UnOp32<> =						(. String op; AsmOperand arg; .)
  ( "incl"
  | "decl"
  | "negl"
  | "notl"
  | "divl"
  | "mull"
  | "bswapl"
  | "pushl"
  | "popl"
  )							(. op = t.val; .)
  Operand32<out arg>
  							(. factory.createUnaryOperation(op, arg); .)
  .

UnOp64<> =						(. String op; AsmOperand arg; .)
  ( "incq"
  | "decq"
  | "negq"
  | "notq"
  | "divq"
  | "mulq"
  | "bswapq"
  | "pushq"
  | "popq"
  )							(. op = t.val; .)
  Operand64<out arg>
  							(. factory.createUnaryOperation(op, arg); .)
  .

UnOp<> =						(. String op; AsmOperand arg; .)
  ( "inc"
  | "dec"
  | "neg"
  | "not"
  | "bswap"
  | "rdrand"
  | "rdseed"
  | "seta"
  | "setae"
  | "setb"
  | "setbe"
  | "setc"
  | "sete"
  | "setg"
  | "setge"
  | "setl"
  | "setle"
  | "setna"
  | "setnae"
  | "setnb"
  | "setnbe"
  | "setnc"
  | "setne"
  | "setng"
  | "setnge"
  | "setnl"
  | "setnle"
  | "setno"
  | "setnp"
  | "setns"
  | "setnz"
  | "seto"
  | "setp"
  | "setpe"
  | "setpo"
  | "sets"
  | "setz"
  | "push"
  | "pop"
  | "cmpxchg8b"
  | "cmpxchg16b"
  )							(. op = t.val; .)
  Operand<out arg>
  							(. factory.createUnaryOperationImplicitSize(op, arg); .)
  .

BinOp8<> =						(. String op; AsmOperand a, b; .)
  ( "movb"
  | "xaddb"
  | "xchgb"
  | "adcb"
  | "addb"
  | "cmpb"
  | "sbbb"
  | "subb"
  | "andb"
  | "orb"
  | "xorb"
  | "rclb"
  | "rcrb"
  | "rolb"
  | "rorb"
  | "salb"
  | "sarb"
  | "shlb"
  | "shrb"
  | "testb"
  | "cmpxchgb"
  )							(. op = t.val; .)
  Operand8<out a> "," Operand8<out b>
  							(. factory.createBinaryOperation(op, a, b); .)
  .

BinOp16<> =						(. String op; AsmOperand a, b; .)
  ( "cmovaw"
  | "cmovaew"
  | "cmovbw"
  | "cmovbew"
  | "cmovcw"
  | "cmovew"
  | "cmovgw"
  | "cmovgew"
  | "cmovlw"
  | "cmovlew"
  | "cmovnaw"
  | "cmovnaew"
  | "cmovnbw"
  | "cmovnbew"
  | "cmovncw"
  | "cmovnew"
  | "cmovngw"
  | "cmovngew"
  | "cmovnlw"
  | "cmovnlew"
  | "cmovnow"
  | "cmovnpw"
  | "cmovnsw"
  | "cmovnzw"
  | "cmovow"
  | "cmovpw"
  | "cmovpew"
  | "cmovpow"
  | "cmovsw"
  | "cmovzw"
  | "cmpxchgw"
  | "movw"
  | "xaddw"
  | "xchgw"
  | "adcw"
  | "addw"
  | "cmpw"
  | "sbbw"
  | "subw"
  | "andw"
  | "orw"
  | "xorw"
  | "testw"
  | "bsfw"
  | "bsrw"
  | "btw"
  | "btcw"
  | "btrw"
  | "btsw"
  )							(. op = t.val; .)
  Operand16<out a> "," Operand16<out b>			(. factory.createBinaryOperation(op, a, b); .)
  |							(. String op; AsmOperand a, b; .)
  ( "rclw"
  | "rcrw"
  | "rolw"
  | "rorw"
  | "salw"
  | "sarw"
  | "shlw"
  | "shrw"
  )							(. op = t.val; .)
  Operand8<out a> "," Operand16<out b>			(. factory.createBinaryOperation(op, a, b); .)
  |							(. String op; AsmOperand a, b; .)
  ( "movsbw"
  | "movzbw"
  )							(. op = t.val; .)
  Operand8<out a> "," Operand16<out b>			(. factory.createBinaryOperation(op, a, b); .)
  .

BinOp32<> =						(. String op; AsmOperand a, b; .)
  ( "cmoval"
  | "cmovael"
  | "cmovbl"
  | "cmovbel"
  | "cmovcl"
  | "cmovel"
  | "cmovgl"
  | "cmovgel"
  | "cmovll"
  | "cmovlel"
  | "cmovnal"
  | "cmovnael"
  | "cmovnbl"
  | "cmovnbel"
  | "cmovncl"
  | "cmovnel"
  | "cmovngl"
  | "cmovngel"
  | "cmovnll"
  | "cmovnlel"
  | "cmovnol"
  | "cmovnpl"
  | "cmovnsl"
  | "cmovnzl"
  | "cmovol"
  | "cmovpl"
  | "cmovpel"
  | "cmovpol"
  | "cmovsl"
  | "cmovzl"
  | "cmpxchgl"
  | "movl"
  | "xaddl"
  | "xchgl"
  | "adcl"
  | "addl"
  | "cmpl"
  | "sbbl"
  | "subl"
  | "andl"
  | "orl"
  | "xorl"
  | "testl"
  | "bsfl"
  | "bsrl"
  | "btl"
  | "btcl"
  | "btrl"
  | "btsl"
  )							(. op = t.val; .)
  Operand32<out a> "," Operand32<out b>			(. factory.createBinaryOperation(op, a, b); .)
  |							(. String op; AsmOperand a, b; .)

  ( "rcll"
  | "rcrl"
  | "roll"
  | "rorl"
  | "sall"
  | "sarl"
  | "shll"
  | "shrl"
  )							(. op = t.val; .)
  Operand8<out a> "," Operand32<out b>			(. factory.createBinaryOperation(op, a, b); .)
  |							(. String op; AsmOperand a, b; .)
  ( "movsbl"
  | "movswl"
  )							(. op = t.val; .)
  Operand8<out a> "," Operand32<out b>			(. factory.createBinaryOperation(op, a, b); .)
  |							(. String op; AsmOperand a, b; .)
  ( "movzbl"
  | "movzwl"
  )							(. op = t.val; .)
  Operand16<out a> "," Operand32<out b>			(. factory.createBinaryOperation(op, a, b); .)
  .

BinOp64<> =						(. String op; AsmOperand a, b; .)
  ( "cmovaq"
  | "cmovaeq"
  | "cmovbq"
  | "cmovbeq"
  | "cmovcq"
  | "cmoveq"
  | "cmovgq"
  | "cmovgeq"
  | "cmovlq"
  | "cmovleq"
  | "cmovnaq"
  | "cmovnaeq"
  | "cmovnbq"
  | "cmovnbeq"
  | "cmovncq"
  | "cmovneq"
  | "cmovngq"
  | "cmovngeq"
  | "cmovnlq"
  | "cmovnleq"
  | "cmovnoq"
  | "cmovnpq"
  | "cmovnsq"
  | "cmovnzq"
  | "cmovoq"
  | "cmovpq"
  | "cmovpeq"
  | "cmovpoq"
  | "cmovsq"
  | "cmovzq"
  | "cmpxchgq"
  | "movq"
  | "xaddq"
  | "xchgq"
  | "adcq"
  | "addq"
  | "cmpq"
  | "sbbq"
  | "subq"
  | "andq"
  | "orq"
  | "xorq"
  | "testq"
  | "bsfq"
  | "bsrq"
  | "btq"
  | "btcq"
  | "btrq"
  | "btsq"
  )							(. op = t.val; .)
  Operand64<out a> "," Operand64<out b>			(. factory.createBinaryOperation(op, a, b); .)
  |							(. String op; AsmOperand a, b; .)
  ( "rclq"
  | "rcrq"
  | "rolq"
  | "rorq"
  | "salq"
  | "sarq"
  | "shlq"
  | "shrq"
  )							(. op = t.val; .)
  Operand8<out a> "," Operand64<out b>			(. factory.createBinaryOperation(op, a, b); .)
  |							(. String op; AsmOperand a, b; .)
  ( "movsbq"
  | "movzbq"
  )							(. op = t.val; .)
  Operand8<out a> "," Operand64<out b>			(. factory.createBinaryOperation(op, a, b); .)
  |							(. String op; AsmOperand a, b; .)
  ( "movswq"
  | "movzwq"
  )							(. op = t.val; .)
  Operand16<out a> "," Operand64<out b>			(. factory.createBinaryOperation(op, a, b); .)
  .

BinOp<> =						(. String op; AsmOperand a, b; .)
  ( "cmova"
  | "cmovae"
  | "cmovb"
  | "cmovbe"
  | "cmovc"
  | "cmove"
  | "cmovg"
  | "cmovge"
  | "cmovl"
  | "cmovle"
  | "cmovna"
  | "cmovnae"
  | "cmovnb"
  | "cmovnbe"
  | "cmovnc"
  | "cmovne"
  | "cmovng"
  | "cmovnge"
  | "cmovnl"
  | "cmovnle"
  | "cmovno"
  | "cmovnp"
  | "cmovns"
  | "cmovnz"
  | "cmovo"
  | "cmovp"
  | "cmovpe"
  | "cmovpo"
  | "cmovs"
  | "cmovz"
  | "cmpxchg"
  | "mov"
  | "xadd"
  | "xchg"
  | "adc"
  | "add"
  | "cmp"
  | "div"
  | "mul"
  | "sbb"
  | "sub"
  | "and"
  | "or"
  | "xor"
  | "rcl"
  | "rcr"
  | "rol"
  | "ror"
  | "sal"
  | "sar"
  | "shl"
  | "shr"
  | "lea"
  )							(. op = t.val; .)
  Operand<out a> "," Operand<out b>
  							(. factory.createBinaryOperationImplicitSize(op, a, b); .)
  .

////////////////////////////////////////////////////////////////////////////////
Operand8<out AsmOperand op> =				(. op = null; .)
  ( Register8<out op>
  | MemoryReference<out op>
  | Immediate<out op>
  | Argument<out op>
  )
  .

Operand16<out AsmOperand op> =				(. op = null; .)
  ( Register16<out op>
  | MemoryReference<out op>
  | Immediate<out op>
  | Argument<out op>
  )
  .

Operand32<out AsmOperand op> =				(. op = null; .)
  ( Register32<out op>
  | MemoryReference<out op>
  | Immediate<out op>
  | Argument<out op>
  )
  .

Operand64<out AsmOperand op> =				(. op = null; .)
  ( Register64<out op>
  | MemoryReference<out op>
  | Immediate<out op>
  | Argument<out op>
  )
  .

Operand<out AsmOperand op> =				(. op = null; .)
  ( Register8<out op>
  | Register16<out op>
  | Register32<out op>
  | Register64<out op>
  | MemoryReference<out op>
  | Immediate<out op>
  | Argument<out op>
  )
  .

MemoryReference<out AsmMemoryOperand operand> =		(. String displacement = null;
							   AsmOperand base = null;
							   AsmOperand offset = null;
							   long tmp;
							   int scale = 1; .)
  ( ( ident						(. displacement = t.val; .)
    | Number<out tmp>					(. displacement = String.valueOf(tmp); .)
    )
    [ "("
      [ Operand<out base> ]
      [ "," Operand<out offset>
        [ "," Number<out tmp>				(. scale = (int) tmp; .)
        ]
      ]
      ")"
    ]
  | "("
    [ Operand<out base> ]
    [ "," Operand<out offset>
      [ "," Number<out tmp>				(. scale = (int) tmp; .)
      ]
    ]
    ")"
  )
							(. operand = new AsmMemoryOperand(displacement, base, offset, scale); .)
  .

Register8<out AsmRegisterOperand reg> =
  ( "%ah"
  | "%al"
  | "%bh"
  | "%bl"
  | "%ch"
  | "%cl"
  | "%dh"
  | "%dl"
  | "%r0l"
  | "%r1l"
  | "%r2l"
  | "%r3l"
  | "%r4l"
  | "%r5l"
  | "%r6l"
  | "%r7l"
  | "%r8l"
  | "%r9l"
  | "%r10l"
  | "%r11l"
  | "%r12l"
  | "%r13l"
  | "%r14l"
  | "%r15l"
  )							(. reg = new AsmRegisterOperand(t.val); .)
  .

Register16<out AsmRegisterOperand reg> =
  ( "%ax"
  | "%bx"
  | "%cx"
  | "%dx"
  | "%si"
  | "%di"
  | "%bp"
  | "%sp"
  | "%r0w"
  | "%r1w"
  | "%r2w"
  | "%r3w"
  | "%r4w"
  | "%r5w"
  | "%r6w"
  | "%r7w"
  | "%r8w"
  | "%r9w"
  | "%r10w"
  | "%r11w"
  | "%r12w"
  | "%r13w"
  | "%r14w"
  | "%r15w"
  )							(. reg = new AsmRegisterOperand(t.val); .)
  .

Register32<out AsmRegisterOperand reg> =
  ( "%eax"
  | "%ebx"
  | "%ecx"
  | "%edx"
  | "%esi"
  | "%edi"
  | "%ebp"
  | "%esp"
  | "%r0d"
  | "%r1d"
  | "%r2d"
  | "%r3d"
  | "%r4d"
  | "%r5d"
  | "%r6d"
  | "%r7d"
  | "%r8d"
  | "%r9d"
  | "%r10d"
  | "%r11d"
  | "%r12d"
  | "%r13d"
  | "%r14d"
  | "%r15d"
  )							(. reg = new AsmRegisterOperand(t.val); .)
  .

Register64<out AsmRegisterOperand reg> =
  ( "%rax"
  | "%rbx"
  | "%rcx"
  | "%rdx"
  | "%rsp"
  | "%rbp"
  | "%rsi"
  | "%rdi"
  | "%r0"
  | "%r1"
  | "%r2"
  | "%r3"
  | "%r4"
  | "%r5"
  | "%r6"
  | "%r7"
  | "%r8"
  | "%r9"
  | "%r10"
  | "%r11"
  | "%r12"
  | "%r13"
  | "%r14"
  | "%r15"
  )							(. reg = new AsmRegisterOperand(t.val); .)
  .

/*
SegmentRegister<out String reg> =
  ( "%cs"
  | "%ds"
  | "%es"
  | "%fs"
  | "%gs"
  | "%ss"
  )							(. reg = t.val; .)
  .
*/

Number<out long n> =					(. n = 0; .)
  ( number						(. n = Long.parseLong(t.val, 10); .)
  | binNumber						(. n = Long.parseLong(t.val.substring(2), 2); .)
  | hexNumber						(. n = Long.parseLong(t.val.substring(2), 16); .)
  )
  .

Immediate<out AsmImmediateOperand imm> =		(. long n; .)
  "$$"
  Number<out n>						(. imm = new AsmImmediateOperand(n); .)
  .

Argument<out AsmArgumentOperand arg> =			(. long n; arg = null; .)
  "$"
  ( Number<out n>					(. arg = new AsmArgumentOperand((int) n); .)
  | "{" Number<out n>
    ":"							(. int size = -1; int shift = 0; .)
    ( "b"						(. size = 8; .)
    | "h"						(. size = 8; shift = 8; .)
    | "w"						(. size = 16; .)
    | "k"						(. size = 32; .)
    | "q"						(. size = 64; .)
    )							(. arg = new AsmArgumentOperand((int) n, size, shift); .)
    "}"
  )
  .

END InlineAssembly.
