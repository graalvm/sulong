/*
 * Copyright (c) 2017, Oracle and/or its affiliates.
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
 * conditions and the following disclaimer in the documentation and/or other materials provided
 * with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
 * endorse or promote products derived from this software without specific prior written
 * permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.oracle.truffle.llvm.parser.metadata;

import com.oracle.truffle.api.source.Source;
import com.oracle.truffle.api.source.SourceSection;
import com.oracle.truffle.llvm.parser.model.functions.FunctionDefinition;
import com.oracle.truffle.llvm.parser.model.symbols.instructions.Call;
import com.oracle.truffle.llvm.parser.model.symbols.instructions.Instruction;
import com.oracle.truffle.llvm.runtime.LLVMLogger;
import com.oracle.truffle.llvm.runtime.types.symbols.Symbol;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

public final class SourceSectionGenerator {

    private final Map<MDBaseNode, Source> scopeToSource;
    private final SourceVisitor sourceVisitor;

    public SourceSectionGenerator() {
        sourceVisitor = new SourceVisitor();
        scopeToSource = new HashMap<>();
    }

    public SourceSection getOrDefault(Instruction instruction) {
        final MDLocation mdLocation = instruction.getDebugLocation();
        if (mdLocation == null) {
            return null;
        }

        final Source source = getSource(mdLocation);
        if (source == null) {
            throw new UnsupportedOperationException("Unsupported Scope: " + mdLocation.getScope().get());
        }

        int column = (int) mdLocation.getColumn();
        if (column <= 0) {
            // llvm 3.2 metadata usually does not provide columns
            column = 1;
        }

        int line;
        if ((line = getLine(mdLocation)) > 0 || (instruction instanceof Call && (line = getCallTargetLine((Call) instruction)) > 0)) {
            return source.createSection(line, column, 1);

        } else {
            throw new RuntimeException(String.format("Cannot get valid SourceSection Line for %s", instruction));
        }
    }

    public SourceSection getOrDefault(FunctionDefinition function, Source bcSource) {
        return getFunctionDIAttachment(function).map(di -> {
            final Source source = getSource(di);
            if (source == null) {
                throw new UnsupportedOperationException("Unsupported Scope: " + di);
            }

            final int line = getLine(di);
            if (line > 0) {
                return source.createSection(line, 1, 1);

            } else {
                // e.g. for functions implicitly generated by llvm, e.g. in section '.text.startup'
                return source.createSection(1);
            }
        }).orElseGet(() -> {
            final String sourceText = String.format("%s:%s", bcSource.getName(), function.getName());
            final Source irSource = Source.newBuilder(sourceText).mimeType("text/plain").name(sourceText).build();
            return irSource.createSection(1);
        });
    }

    private Source getSource(MDBaseNode md) {
        md.accept(sourceVisitor);
        return scopeToSource.get(md);
    }

    private int getLine(MDBaseNode md) {
        final LineVisitor lineVisitor = new LineVisitor();
        md.accept(lineVisitor);
        return lineVisitor.getLine();
    }

    private int getCallTargetLine(Call call) {
        final Symbol callTarget = call.getCallTarget();
        if (callTarget instanceof FunctionDefinition) {
            return getFunctionDIAttachment((FunctionDefinition) callTarget).map(this::getLine).orElse(-1);
        }
        return -1;
    }

    private static Optional<MDBaseNode> getFunctionDIAttachment(FunctionDefinition function) {
        return function.getMetadata().getFunctionAttachments().stream().filter(md -> MDKind.DBG_NAME.equals(md.getKind().getName())).findAny().map(dbg -> dbg.getMdRef().get());
    }

    private final class SourceVisitor implements MetadataVisitor {

        @Override
        public void visit(MDFile md) {
            scopeToSource.computeIfAbsent(md, mdBaseNode -> {
                final File sourceFile = md.asFile();
                try {
                    return Source.newBuilder(sourceFile).mimeType(getMimeType(sourceFile)).name(sourceFile.getName()).build();
                } catch (IOException e) {
                    throw new AssertionError(String.format("Cannot generate Source: %s", sourceFile.getAbsolutePath()), e);
                }
            });
        }

        @Override
        public void visit(MDLexicalBlock md) {
            registerScope(md, md.getFile().get());
        }

        @Override
        public void visit(MDLexicalBlockFile md) {
            registerScope(md, md.getFile().get());
        }

        @Override
        public void visit(MDLocation md) {
            registerScope(md, md.getScope().get());
        }

        @Override
        public void visit(MDSubprogram md) {
            registerScope(md, md.getFile().get());
        }

        @Override
        public void ifVisitNotOverwritten(MDBaseNode md) {
            throw new UnsupportedOperationException(String.format("Unsupported Source Scope: %s", md));
        }

        private void registerScope(MDBaseNode md, MDBaseNode scope) {
            if (!scopeToSource.containsKey(scope)) {
                scope.accept(this);
            }
            scopeToSource.put(md, scopeToSource.get(scope));
        }
    }

    private final class LineVisitor implements MetadataVisitor {

        private long line = -1;

        @Override
        public void visit(MDLexicalBlock md) {
            if ((line = md.getLine()) <= 0) {
                md.getScope().get().accept(this);
            }
        }

        @Override
        public void visit(MDSubprogram md) {
            if ((line = md.getLine()) <= 0 && (line = md.getScopeLine()) <= 0) {
                md.getScope().get().accept(this);
            }
        }

        @Override
        public void visit(MDLocation md) {
            if ((line = md.getLine()) <= 0) {
                md.getScope().get().accept(this);
            }
        }

        @Override
        public void ifVisitNotOverwritten(MDBaseNode md) {
            LLVMLogger.info("Metadata: Unsupported Line Scope: " + md);
        }

        private int getLine() {
            return (int) line;
        }
    }

    private static String getMimeType(File file) {
        final String path = file.getPath();
        final int dotIndex = path.lastIndexOf('.');
        if (dotIndex <= 0) {
            return "text/plain";
        }
        final String fileExtension = path.substring(dotIndex + 1);
        switch (fileExtension) {
            case "c":
                return "text/x-c";
            case "h":
                return "text/x-h";
            case "f":
            case "f90":
            case "for":
                return "text/x-fortran";
            default:
                return "text/plain";
        }
    }

}
